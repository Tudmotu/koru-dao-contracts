{
  "address": "0x41E6C8133FED746E33a2Ab8f1D60C1F15B485f8f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_actionInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_koruDao",
          "type": "address"
        },
        {
          "internalType": "contract IERC721MetaTxEnumerableUpgradeable",
          "name": "_koruDaoNft",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "actionInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_action",
          "type": "uint256"
        }
      ],
      "name": "checkAndUpdateRestriction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_action",
          "type": "uint256"
        }
      ],
      "name": "checkRestriction",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getKoruDaoNftTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "koruDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "koruDaoNft",
      "outputs": [
        {
          "internalType": "contract IERC721MetaTxEnumerableUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lastActionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        }
      ],
      "name": "lastFollow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        }
      ],
      "name": "lastMirror",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        }
      ],
      "name": "lastPost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ce7444ba3daf8df69ccf0bb2f842455aeb1505ac29e60d1e45129624aa441f0",
  "receipt": {
    "to": null,
    "from": "0xE1338d3D972D7304DcB66334EFFa21f652E16025",
    "contractAddress": "0x41E6C8133FED746E33a2Ab8f1D60C1F15B485f8f",
    "transactionIndex": 0,
    "gasUsed": "774000",
    "logsBloom": "0x
    "blockHash": "0xcb9b004efb4ca345d96da397b882387c02910d6d43d306586334797c67bb9858",
    "transactionHash": "0x0ce7444ba3daf8df69ccf0bb2f842455aeb1505ac29e60d1e45129624aa441f0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32301234,
        "transactionHash": "0x0ce7444ba3daf8df69ccf0bb2f842455aeb1505ac29e60d1e45129624aa441f0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e1338d3d972d7304dcb66334effa21f652e16025",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006c6581a666db000000000000000000000000000000000000000000000000003b9274bf86be952000000000000000000000000000000000000000000002dc9b3933a83d2e843a200000000000000000000000000000000000000000000000003b260f3de057ba2000000000000000000000000000000000000000000002dc9b39a00dbed4eb152",
        "logIndex": 0,
        "blockHash": "0xcb9b004efb4ca345d96da397b882387c02910d6d43d306586334797c67bb9858"
      }
    ],
    "blockNumber": 32301234,
    "cumulativeGasUsed": "774000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    300,
    "0xd4541F817E8219DFB07a80146A4ed8AB7716630F",
    "0xf2F453e234d499EC36B1310c4D351353DD7e188c"
  ],
  "numDeployments": 2,
  "solcInputHash": "028403ca66e00188f198810fe5a1bade",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actionInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_koruDao\",\"type\":\"address\"},{\"internalType\":\"contract IERC721MetaTxEnumerableUpgradeable\",\"name\":\"_koruDaoNft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"actionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_action\",\"type\":\"uint256\"}],\"name\":\"checkAndUpdateRestriction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_action\",\"type\":\"uint256\"}],\"name\":\"checkRestriction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getKoruDaoNftTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koruDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koruDaoNft\",\"outputs\":[{\"internalType\":\"contract IERC721MetaTxEnumerableUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lastActionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"lastFollow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"lastMirror\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"lastPost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimeRestrictionForPosting.sol\":\"TimeRestrictionForPosting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/TimeRestrictionForPosting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {IKoruDao} from \\\"./interfaces/IKoruDao.sol\\\";\\nimport {IKoruDaoRestriction} from \\\"./interfaces/IKoruDaoRestriction.sol\\\";\\nimport {\\n    IERC721MetaTxEnumerableUpgradeable\\n} from \\\"./interfaces/IERC721MetaTxEnumerableUpgradeable.sol\\\";\\n\\n//solhint-disable not-rely-on-time\\ncontract TimeRestrictionForPosting is IKoruDaoRestriction {\\n    uint256 public immutable actionInterval;\\n    address public immutable koruDao;\\n    IERC721MetaTxEnumerableUpgradeable public immutable koruDaoNft;\\n\\n    mapping(bytes32 => uint256) public lastActionTime;\\n\\n    modifier onlyKoruDao() {\\n        require(\\n            msg.sender == koruDao,\\n            \\\"TimeRestrictionForPosting: Only KoruDao\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _actionInterval,\\n        address _koruDao,\\n        IERC721MetaTxEnumerableUpgradeable _koruDaoNft\\n    ) {\\n        actionInterval = _actionInterval;\\n        koruDao = _koruDao;\\n        koruDaoNft = _koruDaoNft;\\n    }\\n\\n    function checkAndUpdateRestriction(address _user, uint256 _action)\\n        external\\n        override\\n        onlyKoruDao\\n        returns (uint256 token)\\n    {\\n        token = getKoruDaoNftTokenId(_user);\\n        checkRestriction(token, _action);\\n\\n        bytes32 tokenActionHash = keccak256(abi.encode(token, _action));\\n\\n        lastActionTime[tokenActionHash] = block.timestamp;\\n    }\\n\\n    function lastPost(uint256 _token) external view returns (uint256) {\\n        bytes32 tokenActionHash = keccak256(\\n            abi.encode(_token, uint256(IKoruDao.Action.POST))\\n        );\\n\\n        return lastActionTime[tokenActionHash];\\n    }\\n\\n    function lastFollow(uint256 _token) external view returns (uint256) {\\n        bytes32 tokenActionHash = keccak256(\\n            abi.encode(_token, uint256(IKoruDao.Action.FOLLOW))\\n        );\\n\\n        return lastActionTime[tokenActionHash];\\n    }\\n\\n    function lastMirror(uint256 _token) external view returns (uint256) {\\n        bytes32 tokenActionHash = keccak256(\\n            abi.encode(_token, uint256(IKoruDao.Action.MIRROR))\\n        );\\n\\n        return lastActionTime[tokenActionHash];\\n    }\\n\\n    function checkRestriction(uint256 _token, uint256 _action)\\n        public\\n        view\\n        override\\n    {\\n        bytes32 tokenActionHash = keccak256(abi.encode(_token, _action));\\n\\n        require(\\n            (block.timestamp - lastActionTime[tokenActionHash] >=\\n                actionInterval),\\n            \\\"TimeRestrictionForPosting: Too frequent\\\"\\n        );\\n    }\\n\\n    function getKoruDaoNftTokenId(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256 token)\\n    {\\n        require(\\n            koruDaoNft.balanceOf(_user) > 0,\\n            \\\"TimeRestrictionForPosting: No KoruDaoNft\\\"\\n        );\\n\\n        token = koruDaoNft.tokenOfOwnerByIndex(_user, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xd6175e9312adf9bb23b4b91bccd65dbc2f745d34a71351291062e124a1e1f6b1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC721MetaTxEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IERC721MetaTxEnumerableUpgradeable is IERC721EnumerableUpgradeable {\\n    function gelatoRelay() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd1d3ca7a9b782f48de923c5a5e704dfdade8d8dcedf4cce63ba94db3d7b882bd\",\"license\":\"MIT\"},\"contracts/interfaces/IKoruDao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\n\\ninterface IKoruDao {\\n    enum Action {\\n        POST,\\n        FOLLOW,\\n        MIRROR\\n    }\\n\\n    event LogPost(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256 indexed pubId,\\n        uint256 time\\n    );\\n\\n    event LogFollow(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256[] indexed followTokenIds,\\n        uint256 time\\n    );\\n\\n    event LogMirror(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256 indexed pubId,\\n        uint256 time\\n    );\\n\\n    function transferLensHandle(address to, uint handle) external;\\n\\n    function post(DataTypes.PostData calldata _postData) external;\\n\\n    function follow(uint256 _profileId, bytes calldata _followData) external;\\n\\n    function mirror(DataTypes.MirrorData calldata _mirrorData) external;\\n}\\n\",\"keccak256\":\"0x57729f337a13dfcac5cfadb500d50e2995dedbce3ec7ee1b265904f46344ba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IKoruDaoRestriction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\n\\ninterface IKoruDaoRestriction {\\n    function checkAndUpdateRestriction(address _user, uint256 _action)\\n        external\\n        returns (uint256 token);\\n\\n    function checkRestriction(uint256 _token, uint256 _action) external view;\\n\\n    function getKoruDaoNftTokenId(address _user)\\n        external\\n        view\\n        returns (uint256 token);\\n}\\n\",\"keccak256\":\"0x89d3ab053345e7152234d515234563c08a3c5212b2e1966cc9d947e2e3604d6f\",\"license\":\"MIT\"},\"contracts/libraries/LensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\",\"keccak256\":\"0x010e8a2b32890fba7eae1858bf4cede187b811bed8db956e10cd82ec0dec27c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162000f3738038062000f3783398181016040528101906200003791906200019a565b82608081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620001f6565b600080fd5b6000819050919050565b620000ca81620000b5565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011d82620000f0565b9050919050565b6200012f8162000110565b81146200013b57600080fd5b50565b6000815190506200014f8162000124565b92915050565b6000620001628262000110565b9050919050565b620001748162000155565b81146200018057600080fd5b50565b600081519050620001948162000169565b92915050565b600080600060608486031215620001b657620001b5620000b0565b5b6000620001c686828701620000d9565b9350506020620001d9868287016200013e565b9250506040620001ec8682870162000183565b9150509250925092565b60805160a05160c051610cf562000242600039600081816104510152818161049c0152610576015260008181610363015261047501526000818161028001526106d10152610cf56000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806371bcfad31161006657806371bcfad31461016d578063753341f41461018b57806375dc9bd5146101bb578063a991690f146101eb578063b00ee89f1461021b5761009e565b80632133529c146100a357806321e1430b146100d35780634aa48e5a146100ef5780635f183e791461011f578063672963501461014f575b600080fd5b6100bd60048036038101906100b8919061072e565b610239565b6040516100ca9190610774565b60405180910390f35b6100ed60048036038101906100e891906107bb565b610251565b005b610109600480360381019061010491906107fb565b610303565b6040516101169190610774565b60405180910390f35b61013960048036038101906101349190610886565b61035f565b6040516101469190610774565b60405180910390f35b61015761044f565b6040516101649190610925565b60405180910390f35b610175610473565b604051610182919061094f565b60405180910390f35b6101a560048036038101906101a0919061096a565b610497565b6040516101b29190610774565b60405180910390f35b6101d560048036038101906101d091906107fb565b610618565b6040516101e29190610774565b60405180910390f35b610205600480360381019061020091906107fb565b610674565b6040516102129190610774565b60405180910390f35b6102236106cf565b6040516102309190610774565b60405180910390f35b60006020528060005260406000206000915090505481565b60008282604051602001610266929190610997565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000060008083815260200190815260200160002054426102bd91906109ef565b10156102fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f590610aa6565b60405180910390fd5b505050565b600080826001600281111561031b5761031a610ac6565b5b60405160200161032c929190610997565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002054915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e690610b67565b60405180910390fd5b6103f883610497565b90506104048183610251565b60008183604051602001610419929190610997565b60405160208183030381529060405280519060200120905042600080838152602001908152602001600020819055505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016104f3919061094f565b602060405180830381865afa158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190610b9c565b11610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90610c3b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f745c598360006040518363ffffffff1660e01b81526004016105d0929190610c96565b602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190610b9c565b9050919050565b60008082600060028111156106305761062f610ac6565b5b604051602001610641929190610997565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002054915050919050565b6000808260028081111561068b5761068a610ac6565b5b60405160200161069c929190610997565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002054915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080fd5b6000819050919050565b61070b816106f8565b811461071657600080fd5b50565b60008135905061072881610702565b92915050565b600060208284031215610744576107436106f3565b5b600061075284828501610719565b91505092915050565b6000819050919050565b61076e8161075b565b82525050565b60006020820190506107896000830184610765565b92915050565b6107988161075b565b81146107a357600080fd5b50565b6000813590506107b58161078f565b92915050565b600080604083850312156107d2576107d16106f3565b5b60006107e0858286016107a6565b92505060206107f1858286016107a6565b9150509250929050565b600060208284031215610811576108106106f3565b5b600061081f848285016107a6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085382610828565b9050919050565b61086381610848565b811461086e57600080fd5b50565b6000813590506108808161085a565b92915050565b6000806040838503121561089d5761089c6106f3565b5b60006108ab85828601610871565b92505060206108bc858286016107a6565b9150509250929050565b6000819050919050565b60006108eb6108e66108e184610828565b6108c6565b610828565b9050919050565b60006108fd826108d0565b9050919050565b600061090f826108f2565b9050919050565b61091f81610904565b82525050565b600060208201905061093a6000830184610916565b92915050565b61094981610848565b82525050565b60006020820190506109646000830184610940565b92915050565b6000602082840312156109805761097f6106f3565b5b600061098e84828501610871565b91505092915050565b60006040820190506109ac6000830185610765565b6109b96020830184610765565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109fa8261075b565b9150610a058361075b565b925082821015610a1857610a176109c0565b5b828203905092915050565b600082825260208201905092915050565b7f54696d655265737472696374696f6e466f72506f7374696e673a20546f6f206660008201527f72657175656e7400000000000000000000000000000000000000000000000000602082015250565b6000610a90602783610a23565b9150610a9b82610a34565b604082019050919050565b60006020820190508181036000830152610abf81610a83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f54696d655265737472696374696f6e466f72506f7374696e673a204f6e6c792060008201527f4b6f727544616f00000000000000000000000000000000000000000000000000602082015250565b6000610b51602783610a23565b9150610b5c82610af5565b604082019050919050565b60006020820190508181036000830152610b8081610b44565b9050919050565b600081519050610b968161078f565b92915050565b600060208284031215610bb257610bb16106f3565b5b6000610bc084828501610b87565b91505092915050565b7f54696d655265737472696374696f6e466f72506f7374696e673a204e6f204b6f60008201527f727544616f4e6674000000000000000000000000000000000000000000000000602082015250565b6000610c25602883610a23565b9150610c3082610bc9565b604082019050919050565b60006020820190508181036000830152610c5481610c18565b9050919050565b6000819050919050565b6000610c80610c7b610c7684610c5b565b6108c6565b61075b565b9050919050565b610c9081610c65565b82525050565b6000604082019050610cab6000830185610940565b610cb86020830184610c87565b939250505056fea264697066735822122095c4a8b735fbdfa0ac7f176e6f02a3edd2638f9611c1bd00eaf4a23378e4eea164736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806371bcfad31161006657806371bcfad31461016d578063753341f41461018b57806375dc9bd5146101bb578063a991690f146101eb578063b00ee89f1461021b5761009e565b80632133529c146100a357806321e1430b146100d35780634aa48e5a146100ef5780635f183e791461011f578063672963501461014f575b600080fd5b6100bd60048036038101906100b8919061072e565b610239565b6040516100ca9190610774565b60405180910390f35b6100ed60048036038101906100e891906107bb565b610251565b005b610109600480360381019061010491906107fb565b610303565b6040516101169190610774565b60405180910390f35b61013960048036038101906101349190610886565b61035f565b6040516101469190610774565b60405180910390f35b61015761044f565b6040516101649190610925565b60405180910390f35b610175610473565b604051610182919061094f565b60405180910390f35b6101a560048036038101906101a0919061096a565b610497565b6040516101b29190610774565b60405180910390f35b6101d560048036038101906101d091906107fb565b610618565b6040516101e29190610774565b60405180910390f35b610205600480360381019061020091906107fb565b610674565b6040516102129190610774565b60405180910390f35b6102236106cf565b6040516102309190610774565b60405180910390f35b60006020528060005260406000206000915090505481565b60008282604051602001610266929190610997565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000060008083815260200190815260200160002054426102bd91906109ef565b10156102fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f590610aa6565b60405180910390fd5b505050565b600080826001600281111561031b5761031a610ac6565b5b60405160200161032c929190610997565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002054915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e690610b67565b60405180910390fd5b6103f883610497565b90506104048183610251565b60008183604051602001610419929190610997565b60405160208183030381529060405280519060200120905042600080838152602001908152602001600020819055505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016104f3919061094f565b602060405180830381865afa158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190610b9c565b11610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90610c3b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f745c598360006040518363ffffffff1660e01b81526004016105d0929190610c96565b602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190610b9c565b9050919050565b60008082600060028111156106305761062f610ac6565b5b604051602001610641929190610997565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002054915050919050565b6000808260028081111561068b5761068a610ac6565b5b60405160200161069c929190610997565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002054915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080fd5b6000819050919050565b61070b816106f8565b811461071657600080fd5b50565b60008135905061072881610702565b92915050565b600060208284031215610744576107436106f3565b5b600061075284828501610719565b91505092915050565b6000819050919050565b61076e8161075b565b82525050565b60006020820190506107896000830184610765565b92915050565b6107988161075b565b81146107a357600080fd5b50565b6000813590506107b58161078f565b92915050565b600080604083850312156107d2576107d16106f3565b5b60006107e0858286016107a6565b92505060206107f1858286016107a6565b9150509250929050565b600060208284031215610811576108106106f3565b5b600061081f848285016107a6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085382610828565b9050919050565b61086381610848565b811461086e57600080fd5b50565b6000813590506108808161085a565b92915050565b6000806040838503121561089d5761089c6106f3565b5b60006108ab85828601610871565b92505060206108bc858286016107a6565b9150509250929050565b6000819050919050565b60006108eb6108e66108e184610828565b6108c6565b610828565b9050919050565b60006108fd826108d0565b9050919050565b600061090f826108f2565b9050919050565b61091f81610904565b82525050565b600060208201905061093a6000830184610916565b92915050565b61094981610848565b82525050565b60006020820190506109646000830184610940565b92915050565b6000602082840312156109805761097f6106f3565b5b600061098e84828501610871565b91505092915050565b60006040820190506109ac6000830185610765565b6109b96020830184610765565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109fa8261075b565b9150610a058361075b565b925082821015610a1857610a176109c0565b5b828203905092915050565b600082825260208201905092915050565b7f54696d655265737472696374696f6e466f72506f7374696e673a20546f6f206660008201527f72657175656e7400000000000000000000000000000000000000000000000000602082015250565b6000610a90602783610a23565b9150610a9b82610a34565b604082019050919050565b60006020820190508181036000830152610abf81610a83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f54696d655265737472696374696f6e466f72506f7374696e673a204f6e6c792060008201527f4b6f727544616f00000000000000000000000000000000000000000000000000602082015250565b6000610b51602783610a23565b9150610b5c82610af5565b604082019050919050565b60006020820190508181036000830152610b8081610b44565b9050919050565b600081519050610b968161078f565b92915050565b600060208284031215610bb257610bb16106f3565b5b6000610bc084828501610b87565b91505092915050565b7f54696d655265737472696374696f6e466f72506f7374696e673a204e6f204b6f60008201527f727544616f4e6674000000000000000000000000000000000000000000000000602082015250565b6000610c25602883610a23565b9150610c3082610bc9565b604082019050919050565b60006020820190508181036000830152610c5481610c18565b9050919050565b6000819050919050565b6000610c80610c7b610c7684610c5b565b6108c6565b61075b565b9050919050565b610c9081610c65565b82525050565b6000604082019050610cab6000830185610940565b610cb86020830184610c87565b939250505056fea264697066735822122095c4a8b735fbdfa0ac7f176e6f02a3edd2638f9611c1bd00eaf4a23378e4eea164736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 802,
        "contract": "contracts/TimeRestrictionForPosting.sol:TimeRestrictionForPosting",
        "label": "lastActionTime",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}