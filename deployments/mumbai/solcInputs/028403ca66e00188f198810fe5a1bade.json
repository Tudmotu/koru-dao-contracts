{
  "language": "Solidity",
  "sources": {
    "contracts/KoruDao.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport {\n    ERC2771Context\n} from \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport {\n    ERC721Holder\n} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport {Proxied} from \"./vendor/proxy/EIP173/Proxied.sol\";\nimport {DataTypes} from \"./libraries/LensDataTypes.sol\";\nimport {ILensHub} from \"./interfaces/ILensHub.sol\";\nimport {IKoruDao} from \"./interfaces/IKoruDao.sol\";\nimport {IKoruDaoRestriction} from \"./interfaces/IKoruDaoRestriction.sol\";\n\n//solhint-disable not-rely-on-time\ncontract KoruDao is ERC721Holder, ERC2771Context, Proxied, IKoruDao {\n    ILensHub public immutable lensHub;\n    uint256 public immutable koruDaoProfileId;\n\n    mapping(Action => address) public actionRestriction;\n\n    modifier onlyGelatoRelay() {\n        require(isTrustedForwarder(msg.sender), \"KoruDao: Only GelatoRelay\");\n        _;\n    }\n\n    constructor(\n        address _gelatoRelay,\n        ILensHub _lensHub,\n        uint256 _koruDaoProfileId,\n        address _controller\n    ) ERC2771Context(_gelatoRelay) {\n        lensHub = _lensHub;\n        koruDaoProfileId = _koruDaoProfileId;\n    }\n\n    function post(DataTypes.PostData calldata _postData)\n        external\n        override\n        onlyGelatoRelay\n    {\n        require(\n            _postData.profileId == koruDaoProfileId,\n            \"KoruDao: Only post for KoruDao\"\n        );\n        address user = _msgSender();\n\n        IKoruDaoRestriction restriction = _getRestriction(Action.POST);\n\n        uint256 token = restriction.checkAndUpdateRestriction(\n            user,\n            uint256(Action.POST)\n        );\n\n        uint256 pubId = lensHub.post(_postData);\n\n        emit LogPost(user, token, pubId, block.timestamp);\n    }\n\n    function follow(uint256 _profileId, bytes calldata _followData)\n        external\n        override\n        onlyGelatoRelay\n    {\n        address user = _msgSender();\n\n        IKoruDaoRestriction restriction = _getRestriction(Action.FOLLOW);\n\n        uint256 token = restriction.checkAndUpdateRestriction(\n            user,\n            uint256(Action.FOLLOW)\n        );\n\n        uint256[] memory profileIds = new uint256[](1);\n        bytes[] memory followDatas = new bytes[](1);\n\n        profileIds[0] = _profileId;\n        followDatas[0] = _followData;\n\n        uint256[] memory followTokenIds = lensHub.follow(\n            profileIds,\n            followDatas\n        );\n\n        emit LogFollow(user, token, followTokenIds, block.timestamp);\n    }\n\n    function mirror(DataTypes.MirrorData calldata _mirrorData)\n        external\n        override\n        onlyGelatoRelay\n    {\n        require(\n            _mirrorData.profileId == koruDaoProfileId,\n            \"KoruDao: Only mirror for KoruDao\"\n        );\n        address user = _msgSender();\n\n        IKoruDaoRestriction restriction = _getRestriction(Action.MIRROR);\n\n        uint256 token = restriction.checkAndUpdateRestriction(\n            user,\n            uint256(Action.MIRROR)\n        );\n\n        uint256 pubId = lensHub.mirror(_mirrorData);\n\n        emit LogMirror(user, token, pubId, block.timestamp);\n    }\n\n    function setActionRestriction(Action _action, address _restriction)\n        external\n        onlyProxyAdmin\n    {\n        actionRestriction[_action] = _restriction;\n    }\n\n    function setDefaultProfile(uint256 _profileId) external onlyProxyAdmin {\n        lensHub.setDefaultProfile(_profileId);\n    }\n\n    function _getRestriction(Action _action)\n        private\n        view\n        returns (IKoruDaoRestriction restriction)\n    {\n        restriction = IKoruDaoRestriction(actionRestriction[_action]);\n\n        require(\n            address(restriction) != address(0),\n            \"KoruDao: Action not active\"\n        );\n    }\n\n    function transferLensHandle(address to, uint handle) external override onlyProxyAdmin {\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.9;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/vendor/proxy/EIP173/Proxied.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nabstract contract Proxied {\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\n    /// It also allows these functions to be called inside a contructor\n    /// even if the contract is meant to be used without proxy\n    modifier proxied() {\n        address proxyAdminAddress = _proxyAdmin();\n        // With hardhat-deploy proxies\n        // the proxyAdminAddress is zero only for the implementation contract\n        // if the implementation contract want to be used as a standalone/immutable contract\n        // it simply has to execute the `proxied` function\n        // This ensure the proxyAdminAddress is never zero post deployment\n        // And allow you to keep the same code for both proxied contract and immutable contract\n        if (proxyAdminAddress == address(0)) {\n            // ensure can not be called twice when used outside of proxy : no admin\n            // solhint-disable-next-line security/no-inline-assembly\n            assembly {\n                sstore(\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                )\n            }\n        } else {\n            require(msg.sender == proxyAdminAddress);\n        }\n        _;\n    }\n\n    modifier onlyProxyAdmin() {\n        require(msg.sender == _proxyAdmin(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _proxyAdmin() internal view returns (address adminAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            adminAddress := sload(\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\n            )\n        }\n    }\n}\n"
    },
    "contracts/libraries/LensDataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\n/**\n * @title DataTypes\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol.\n */\nlibrary DataTypes {\n    /**\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\n     *\n     * @param Unpaused The fully unpaused state.\n     * @param PublishingPaused The state where only publication creation functions are paused.\n     * @param Paused The fully paused state.\n     */\n    enum ProtocolState {\n        Unpaused,\n        PublishingPaused,\n        Paused\n    }\n\n    /**\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\n     *\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\n     * @param Nonexistent An indicator showing the queried publication does not exist.\n     */\n    enum PubType {\n        Post,\n        Comment,\n        Mirror,\n        Nonexistent\n    }\n\n    /**\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n     *\n     * @param v The signature's recovery parameter.\n     * @param r The signature's r parameter.\n     * @param s The signature's s parameter\n     * @param deadline The signature's deadline\n     */\n    struct EIP712Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    /**\n     * @notice A struct containing profile data.\n     *\n     * @param pubCount The number of publications made to this profile.\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\n     * @param handle The profile's associated handle.\n     * @param imageURI The URI to be used for the profile's image.\n     * @param followNFTURI The URI to be used for the follow NFT.\n     */\n    struct ProfileStruct {\n        uint256 pubCount;\n        address followModule;\n        address followNFT;\n        string handle;\n        string imageURI;\n        string followNFTURI;\n    }\n\n    /**\n     * @notice A struct containing data associated with each new publication.\n     *\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\n     * @param contentURI The URI associated with this publication.\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\n     */\n    struct PublicationStruct {\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        string contentURI;\n        address referenceModule;\n        address collectModule;\n        address collectNFT;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `createProfile()` function.\n     *\n     * @param to The address receiving the profile.\n     * @param handle The handle to set for the profile, must be unique and non-empty.\n     * @param imageURI The URI to set for the profile image.\n     * @param followModule The follow module to use, can be the zero address.\n     * @param followModuleInitData The follow module initialization data, if any.\n     * @param followNFTURI The URI to use for the follow NFT.\n     */\n    struct CreateProfileData {\n        address to;\n        string handle;\n        string imageURI;\n        address followModule;\n        bytes followModuleInitData;\n        string followNFTURI;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\n     *\n     * @param wallet The address of the wallet setting the default profile.\n     * @param profileId The token ID of the profile which will be set as default, or zero.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetDefaultProfileWithSigData {\n        address wallet;\n        uint256 profileId;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to change the followModule for.\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetFollowModuleWithSigData {\n        uint256 profileId;\n        address followModule;\n        bytes followModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to set the dispatcher for.\n     * @param dispatcher The dispatcher address to set for the profile.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetDispatcherWithSigData {\n        uint256 profileId;\n        address dispatcher;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to set the URI for.\n     * @param imageURI The URI to set for the given profile image.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetProfileImageURIWithSigData {\n        uint256 profileId;\n        string imageURI;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\n     * @param followNFTURI The follow NFT URI to set.\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\n     */\n    struct SetFollowNFTURIWithSigData {\n        uint256 profileId;\n        string followNFTURI;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `post()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param collectModule The collect module to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct PostData {\n        uint256 profileId;\n        string contentURI;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\n     * the regular `post()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param collectModule The collectModule to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct PostWithSigData {\n        uint256 profileId;\n        string contentURI;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param profileIdPointed The profile token ID to point the comment to.\n     * @param pubIdPointed The publication ID to point the comment to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param collectModule The collect module to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct CommentData {\n        uint256 profileId;\n        string contentURI;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\n     * the regular `comment()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param profileIdPointed The profile token ID to point the comment to.\n     * @param pubIdPointed The publication ID to point the comment to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param collectModule The collectModule to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct CommentWithSigData {\n        uint256 profileId;\n        string contentURI;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirror()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param profileIdPointed The profile token ID to point the mirror to.\n     * @param pubIdPointed The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct MirrorData {\n        uint256 profileId;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\n     * the regular `mirror()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param profileIdPointed The profile token ID to point the mirror to.\n     * @param pubIdPointed The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct MirrorWithSigData {\n        uint256 profileId;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\n     *\n     * @param follower The follower which is the message signer.\n     * @param profileIds The array of token IDs of the profiles to follow.\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\n     * @param sig The EIP712Signature struct containing the follower's signature.\n     */\n    struct FollowWithSigData {\n        address follower;\n        uint256[] profileIds;\n        bytes[] datas;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\n     *\n     * @param collector The collector which is the message signer.\n     * @param profileId The token ID of the profile that published the publication to collect.\n     * @param pubId The publication to collect's publication ID.\n     * @param data The arbitrary data to pass to the collectModule if needed.\n     * @param sig The EIP712Signature struct containing the collector's signature.\n     */\n    struct CollectWithSigData {\n        address collector;\n        uint256 profileId;\n        uint256 pubId;\n        bytes data;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\n     *\n     * @param profileId The profile ID for which to set the metadata.\n     * @param metadata The metadata string to set for the profile and user.\n     * @param sig The EIP712Signature struct containing the user's signature.\n     */\n    struct SetProfileMetadataWithSigData {\n        uint256 profileId;\n        string metadata;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\n     *\n     * @param follower The follower which is the message signer.\n     * @param profileIds The token ID array of the profiles.\n     * @param enables The array of booleans to enable/disable follows.\n     * @param sig The EIP712Signature struct containing the follower's signature.\n     */\n    struct ToggleFollowWithSigData {\n        address follower;\n        uint256[] profileIds;\n        bool[] enables;\n        EIP712Signature sig;\n    }\n}\n"
    },
    "contracts/interfaces/ILensHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport {DataTypes} from \"../libraries/LensDataTypes.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title ILensHub\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\n * You'll find all the events and external functions, as well as the reasoning behind them here.\n */\ninterface ILensHub is IERC721 {\n    /**\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\n     * the LensNFTBase contract.\n     *\n     * @param name The name to set for the hub NFT.\n     * @param symbol The symbol to set for the hub NFT.\n     * @param newGovernance The governance address to set.\n     */\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address newGovernance\n    ) external;\n\n    /**\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\n     * address.\n     *\n     * @param newGovernance The new governance address to set.\n     */\n    function setGovernance(address newGovernance) external;\n\n    /**\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\n     * can only be called by the governance address.\n     *\n     * @param newEmergencyAdmin The new emergency admin address to set.\n     */\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\n\n    /**\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\n     * can only be called by the governance address or the emergency admin address.\n     *\n     * Note that this reverts if the emergency admin calls it if:\n     *      1. The emergency admin is attempting to unpause.\n     *      2. The emergency admin is calling while the protocol is already paused.\n     *\n     * @param newState The state to set, as a member of the ProtocolState enum.\n     */\n    function setState(DataTypes.ProtocolState newState) external;\n\n    /**\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\n     * @param whitelist Whether or not the profile creator should be whitelisted.\n     */\n    function whitelistProfileCreator(address profileCreator, bool whitelist)\n        external;\n\n    /**\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param followModule The follow module contract address to add or remove from the whitelist.\n     * @param whitelist Whether or not the follow module should be whitelisted.\n     */\n    function whitelistFollowModule(address followModule, bool whitelist)\n        external;\n\n    /**\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\n     * @param whitelist Whether or not the reference module should be whitelisted.\n     */\n    function whitelistReferenceModule(address referenceModule, bool whitelist)\n        external;\n\n    /**\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\n     * @param whitelist Whether or not the collect module should be whitelisted.\n     */\n    function whitelistCollectModule(address collectModule, bool whitelist)\n        external;\n\n    /**\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\n     * function must be called by a whitelisted profile creator.\n     *\n     * @param vars A CreateProfileData struct containing the following params:\n     *      to: The address receiving the profile.\n     *      handle: The handle to set for the profile, must be unique and non-empty.\n     *      imageURI: The URI to set for the profile image.\n     *      followModule: The follow module to use, can be the zero address.\n     *      followModuleInitData: The follow module initialization data, if any.\n     */\n    function createProfile(DataTypes.CreateProfileData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Sets the mapping between wallet and its main profile identity.\n     *\n     * @param profileId The token ID of the profile to set as the main profile identity.\n     */\n    function setDefaultProfile(uint256 profileId) external;\n\n    /**\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\n     *\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setDefaultProfileWithSig(\n        DataTypes.SetDefaultProfileWithSigData calldata vars\n    ) external;\n\n    /**\n     * @notice Sets a profile's follow module, must be called by the profile owner.\n     *\n     * @param profileId The token ID of the profile to set the follow module for.\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\n     */\n    function setFollowModule(\n        uint256 profileId,\n        address followModule,\n        bytes calldata followModuleInitData\n    ) external;\n\n    /**\n     * @notice Sets a profile's follow module via signature with the specified parameters.\n     *\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setFollowModuleWithSig(\n        DataTypes.SetFollowModuleWithSigData calldata vars\n    ) external;\n\n    /**\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\n     *\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\n     * @param dispatcher The dispatcher address to set for the given profile ID.\n     */\n    function setDispatcher(uint256 profileId, address dispatcher) external;\n\n    /**\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\n     *\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setDispatcherWithSig(\n        DataTypes.SetDispatcherWithSigData calldata vars\n    ) external;\n\n    /**\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\n     *\n     * @param profileId The token ID of the profile of the profile to set the URI for.\n     * @param imageURI The URI to set for the given profile.\n     */\n    function setProfileImageURI(uint256 profileId, string calldata imageURI)\n        external;\n\n    /**\n     * @notice Sets a profile's URI via signature with the specified parameters.\n     *\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setProfileImageURIWithSig(\n        DataTypes.SetProfileImageURIWithSigData calldata vars\n    ) external;\n\n    /**\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\n     *\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\n     * @param followNFTURI The follow NFT URI to set.\n     */\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI)\n        external;\n\n    /**\n     * @notice Sets a followNFT URI via signature with the specified parameters.\n     *\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setFollowNFTURIWithSig(\n        DataTypes.SetFollowNFTURIWithSigData calldata vars\n    ) external;\n\n    /**\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\n     *\n     * @param vars A PostData struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the post's publication ID.\n     */\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\n     *\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the post's publication ID.\n     */\n    function postWithSig(DataTypes.PostWithSigData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\n     *\n     * @param vars A CommentData struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the comment's publication ID.\n     */\n    function comment(DataTypes.CommentData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\n     *\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the comment's publication ID.\n     */\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\n     *\n     * @param vars A MirrorData struct containing the necessary parameters.\n     *\n     * @return uint256 An integer representing the mirror's publication ID.\n     */\n    function mirror(DataTypes.MirrorData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\n     *\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the mirror's publication ID.\n     */\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\n     *\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\n     *\n     * @param profileIds The token ID array of the profiles to follow.\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\n     *\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\n     */\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * @notice Follows a given profile via signature with the specified parameters.\n     *\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\n     * and an EIP712Signature struct.\n     *\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\n     */\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\n     *\n     * @param profileId The token ID of the profile that published the publication to collect.\n     * @param pubId The publication to collect's publication ID.\n     * @param data The arbitrary data to pass to the collect module if needed.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function collect(\n        uint256 profileId,\n        uint256 pubId,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Collects a given publication via signature with the specified parameters.\n     *\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\n     * an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars)\n        external\n        returns (uint256);\n\n    /**\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\n     * followNFT transfers.\n     *\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\n     * @param followNFTId The followNFT being transferred's token ID.\n     * @param from The address the followNFT is being transferred from.\n     * @param to The address the followNFT is being transferred to.\n     */\n    function emitFollowNFTTransferEvent(\n        uint256 profileId,\n        uint256 followNFTId,\n        address from,\n        address to\n    ) external;\n\n    /**\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\n     * collectNFT transfers.\n     *\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\n     * @param pubId The publication ID associated with the collect NFT being transferred.\n     * @param collectNFTId The collectNFT being transferred's token ID.\n     * @param from The address the collectNFT is being transferred from.\n     * @param to The address the collectNFT is being transferred to.\n     */\n    function emitCollectNFTTransferEvent(\n        uint256 profileId,\n        uint256 pubId,\n        uint256 collectNFTId,\n        address from,\n        address to\n    ) external;\n\n    /// ************************\n    /// *****VIEW FUNCTIONS*****\n    /// ************************\n\n    /**\n     * @notice Returns whether or not a profile creator is whitelisted.\n     *\n     * @param profileCreator The address of the profile creator to check.\n     *\n     * @return bool True if the profile creator is whitelisted, false otherwise.\n     */\n    function isProfileCreatorWhitelisted(address profileCreator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns default profile for a given wallet address\n     *\n     * @param wallet The address to find the default mapping\n     *\n     * @return uint256 The default profile id, which will be 0 if not mapped.\n     */\n    function defaultProfile(address wallet) external view returns (uint256);\n\n    /**\n     * @notice Returns whether or not a follow module is whitelisted.\n     *\n     * @param followModule The address of the follow module to check.\n     *\n     * @return bool True if the the follow module is whitelisted, false otherwise.\n     */\n    function isFollowModuleWhitelisted(address followModule)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns whether or not a reference module is whitelisted.\n     *\n     * @param referenceModule The address of the reference module to check.\n     *\n     * @return bool True if the the reference module is whitelisted, false otherwise.\n     */\n    function isReferenceModuleWhitelisted(address referenceModule)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns whether or not a collect module is whitelisted.\n     *\n     * @param collectModule The address of the collect module to check.\n     *\n     * @return bool True if the the collect module is whitelisted, false otherwise.\n     */\n    function isCollectModuleWhitelisted(address collectModule)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @notice Returns the currently configured governance address.\n     *\n     * @return address The address of the currently configured governance.\n     */\n    function getGovernance() external view returns (address);\n\n    /**\n     * @notice Returns the dispatcher associated with a profile.\n     *\n     * @param profileId The token ID of the profile to query the dispatcher for.\n     *\n     * @return address The dispatcher address associated with the profile.\n     */\n    function getDispatcher(uint256 profileId) external view returns (address);\n\n    /**\n     * @notice Returns the publication count for a given profile.\n     *\n     * @param profileId The token ID of the profile to query.\n     *\n     * @return uint256 The number of publications associated with the queried profile.\n     */\n    function getPubCount(uint256 profileId) external view returns (uint256);\n\n    /**\n     * @notice Returns the followNFT associated with a given profile, if any.\n     *\n     * @param profileId The token ID of the profile to query the followNFT for.\n     *\n     * @return address The followNFT associated with the given profile.\n     */\n    function getFollowNFT(uint256 profileId) external view returns (address);\n\n    /**\n     * @notice Returns the followNFT URI associated with a given profile.\n     *\n     * @param profileId The token ID of the profile to query the followNFT URI for.\n     *\n     * @return string The followNFT URI associated with the given profile.\n     */\n    function getFollowNFTURI(uint256 profileId)\n        external\n        view\n        returns (string memory);\n\n    /**\n     * @notice Returns the collectNFT associated with a given publication, if any.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return address The address of the collectNFT associated with the queried publication.\n     */\n    function getCollectNFT(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Returns the follow module associated witha  given profile, if any.\n     *\n     * @param profileId The token ID of the profile to query the follow module for.\n     *\n     * @return address The address of the follow module associated with the given profile.\n     */\n    function getFollowModule(uint256 profileId) external view returns (address);\n\n    /**\n     * @notice Returns the collect module associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return address The address of the collect module associated with the queried publication.\n     */\n    function getCollectModule(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Returns the reference module associated witha  given profile, if any.\n     *\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\n     * @param pubId The publication ID of the publication to query the reference module for.\n     *\n     * @return address The address of the reference module associated with the given profile.\n     */\n    function getReferenceModule(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Returns the handle associated with a profile.\n     *\n     * @param profileId The token ID of the profile to query the handle for.\n     *\n     * @return string The handle associated with the profile.\n     */\n    function getHandle(uint256 profileId) external view returns (string memory);\n\n    /**\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\n     * @param pubId The publication ID of the publication to query the pointer for.\n     *\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\n     * publication ID of the publication the current publication is pointing to.\n     */\n    function getPubPointer(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n     * @notice Returns the URI associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return string The URI associated with a given publication.\n     */\n    function getContentURI(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (string memory);\n\n    /**\n     * @notice Returns the profile token ID according to a given handle.\n     *\n     * @param handle The handle to resolve the profile token ID with.\n     *\n     * @return uint256 The profile ID the passed handle points to.\n     */\n    function getProfileIdByHandle(string calldata handle)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the full profile struct associated with a given profile token ID.\n     *\n     * @param profileId The token ID of the profile to query.\n     *\n     * @return ProfileStruct The profile struct of the given profile.\n     */\n    function getProfile(uint256 profileId)\n        external\n        view\n        returns (DataTypes.ProfileStruct memory);\n\n    /**\n     * @notice Returns the full publication struct for a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return PublicationStruct The publication struct associated with the queried publication.\n     */\n    function getPub(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (DataTypes.PublicationStruct memory);\n\n    /**\n     * @notice Returns the publication type associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return PubType The publication type, as a member of an enum (either \"post,\" \"comment\" or \"mirror\").\n     */\n    function getPubType(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (DataTypes.PubType);\n\n    /**\n     * @notice Returns the follow NFT implementation address.\n     *\n     * @return address The follow NFT implementation address.\n     */\n    function getFollowNFTImpl() external view returns (address);\n\n    /**\n     * @notice Returns the collect NFT implementation address.\n     *\n     * @return address The collect NFT implementation address.\n     */\n    function getCollectNFTImpl() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IKoruDao.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport {DataTypes} from \"../libraries/LensDataTypes.sol\";\n\ninterface IKoruDao {\n    enum Action {\n        POST,\n        FOLLOW,\n        MIRROR\n    }\n\n    event LogPost(\n        address indexed user,\n        uint256 indexed token,\n        uint256 indexed pubId,\n        uint256 time\n    );\n\n    event LogFollow(\n        address indexed user,\n        uint256 indexed token,\n        uint256[] indexed followTokenIds,\n        uint256 time\n    );\n\n    event LogMirror(\n        address indexed user,\n        uint256 indexed token,\n        uint256 indexed pubId,\n        uint256 time\n    );\n\n    function transferLensHandle(address to, uint handle) external;\n\n    function post(DataTypes.PostData calldata _postData) external;\n\n    function follow(uint256 _profileId, bytes calldata _followData) external;\n\n    function mirror(DataTypes.MirrorData calldata _mirrorData) external;\n}\n"
    },
    "contracts/interfaces/IKoruDaoRestriction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport {DataTypes} from \"../libraries/LensDataTypes.sol\";\n\ninterface IKoruDaoRestriction {\n    function checkAndUpdateRestriction(address _user, uint256 _action)\n        external\n        returns (uint256 token);\n\n    function checkRestriction(uint256 _token, uint256 _action) external view;\n\n    function getKoruDaoNftTokenId(address _user)\n        external\n        view\n        returns (uint256 token);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TimeRestrictionForPosting.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport {IKoruDao} from \"./interfaces/IKoruDao.sol\";\nimport {IKoruDaoRestriction} from \"./interfaces/IKoruDaoRestriction.sol\";\nimport {\n    IERC721MetaTxEnumerableUpgradeable\n} from \"./interfaces/IERC721MetaTxEnumerableUpgradeable.sol\";\n\n//solhint-disable not-rely-on-time\ncontract TimeRestrictionForPosting is IKoruDaoRestriction {\n    uint256 public immutable actionInterval;\n    address public immutable koruDao;\n    IERC721MetaTxEnumerableUpgradeable public immutable koruDaoNft;\n\n    mapping(bytes32 => uint256) public lastActionTime;\n\n    modifier onlyKoruDao() {\n        require(\n            msg.sender == koruDao,\n            \"TimeRestrictionForPosting: Only KoruDao\"\n        );\n        _;\n    }\n\n    constructor(\n        uint256 _actionInterval,\n        address _koruDao,\n        IERC721MetaTxEnumerableUpgradeable _koruDaoNft\n    ) {\n        actionInterval = _actionInterval;\n        koruDao = _koruDao;\n        koruDaoNft = _koruDaoNft;\n    }\n\n    function checkAndUpdateRestriction(address _user, uint256 _action)\n        external\n        override\n        onlyKoruDao\n        returns (uint256 token)\n    {\n        token = getKoruDaoNftTokenId(_user);\n        checkRestriction(token, _action);\n\n        bytes32 tokenActionHash = keccak256(abi.encode(token, _action));\n\n        lastActionTime[tokenActionHash] = block.timestamp;\n    }\n\n    function lastPost(uint256 _token) external view returns (uint256) {\n        bytes32 tokenActionHash = keccak256(\n            abi.encode(_token, uint256(IKoruDao.Action.POST))\n        );\n\n        return lastActionTime[tokenActionHash];\n    }\n\n    function lastFollow(uint256 _token) external view returns (uint256) {\n        bytes32 tokenActionHash = keccak256(\n            abi.encode(_token, uint256(IKoruDao.Action.FOLLOW))\n        );\n\n        return lastActionTime[tokenActionHash];\n    }\n\n    function lastMirror(uint256 _token) external view returns (uint256) {\n        bytes32 tokenActionHash = keccak256(\n            abi.encode(_token, uint256(IKoruDao.Action.MIRROR))\n        );\n\n        return lastActionTime[tokenActionHash];\n    }\n\n    function checkRestriction(uint256 _token, uint256 _action)\n        public\n        view\n        override\n    {\n        bytes32 tokenActionHash = keccak256(abi.encode(_token, _action));\n\n        require(\n            (block.timestamp - lastActionTime[tokenActionHash] >=\n                actionInterval),\n            \"TimeRestrictionForPosting: Too frequent\"\n        );\n    }\n\n    function getKoruDaoNftTokenId(address _user)\n        public\n        view\n        override\n        returns (uint256 token)\n    {\n        require(\n            koruDaoNft.balanceOf(_user) > 0,\n            \"TimeRestrictionForPosting: No KoruDaoNft\"\n        );\n\n        token = koruDaoNft.tokenOfOwnerByIndex(_user, 0);\n    }\n}\n"
    },
    "contracts/interfaces/IERC721MetaTxEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\";\n\ninterface IERC721MetaTxEnumerableUpgradeable is IERC721EnumerableUpgradeable {\n    function gelatoRelay() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}