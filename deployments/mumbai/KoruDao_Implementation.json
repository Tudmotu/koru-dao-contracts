{
  "address": "0x0cbaAEc376EF1Cd29fede813E0fcd9073977899b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelatoRelay",
          "type": "address"
        },
        {
          "internalType": "contract ILensHub",
          "name": "_lensHub",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_koruDaoProfileId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "followTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "LogFollow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "LogMirror",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "LogPost",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKoruDao.Action",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "actionRestriction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profileId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_followData",
          "type": "bytes"
        }
      ],
      "name": "follow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "koruDaoProfileId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lensHub",
      "outputs": [
        {
          "internalType": "contract ILensHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profileIdPointed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pubIdPointed",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "referenceModuleData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "referenceModule",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "referenceModuleInitData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.MirrorData",
          "name": "_mirrorData",
          "type": "tuple"
        }
      ],
      "name": "mirror",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "collectModule",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "collectModuleInitData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "referenceModule",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "referenceModuleInitData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.PostData",
          "name": "_postData",
          "type": "tuple"
        }
      ],
      "name": "post",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKoruDao.Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_restriction",
          "type": "address"
        }
      ],
      "name": "setActionRestriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profileId",
          "type": "uint256"
        }
      ],
      "name": "setDefaultProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        }
      ],
      "name": "transferLensHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3eb51833b131f53bb3ec9167bd0c2c1861990c571e5c4b892b20ddca9e26e172",
  "receipt": {
    "to": null,
    "from": "0xE1338d3D972D7304DcB66334EFFa21f652E16025",
    "contractAddress": "0x0cbaAEc376EF1Cd29fede813E0fcd9073977899b",
    "transactionIndex": 2,
    "gasUsed": "1837722",
    "logsBloom": "0x
    "blockHash": "0xd274b47b5c25a5257e862a7ccb647aea2358bd00155cc1c79954162b7f039e94",
    "transactionHash": "0x3eb51833b131f53bb3ec9167bd0c2c1861990c571e5c4b892b20ddca9e26e172",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 32301222,
        "transactionHash": "0x3eb51833b131f53bb3ec9167bd0c2c1861990c571e5c4b892b20ddca9e26e172",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e1338d3d972d7304dcb66334effa21f652e16025",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f9a59041bcc1400000000000000000000000000000000000000000000000003c8eb35787dddd30000000000000000000000000000000000000000000002577cd41b8a0793dc7100000000000000000000000000000000000000000000000003b950dc746211bf0000000000000000000000000000000000000000000002577ce3b5e30bafa885",
        "logIndex": 17,
        "blockHash": "0xd274b47b5c25a5257e862a7ccb647aea2358bd00155cc1c79954162b7f039e94"
      }
    ],
    "blockNumber": 32301222,
    "cumulativeGasUsed": "4217651",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d",
    "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82",
    "28100"
  ],
  "numDeployments": 2,
  "solcInputHash": "529e06143c6464d1e91fe2cd19fb6076",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoRelay\",\"type\":\"address\"},{\"internalType\":\"contract ILensHub\",\"name\":\"_lensHub\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_koruDaoProfileId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"followTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogFollow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogMirror\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogPost\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IKoruDao.Action\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"actionRestriction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profileId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_followData\",\"type\":\"bytes\"}],\"name\":\"follow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koruDaoProfileId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lensHub\",\"outputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.MirrorData\",\"name\":\"_mirrorData\",\"type\":\"tuple\"}],\"name\":\"mirror\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"collectModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.PostData\",\"name\":\"_postData\",\"type\":\"tuple\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKoruDao.Action\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_restriction\",\"type\":\"address\"}],\"name\":\"setActionRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profileId\",\"type\":\"uint256\"}],\"name\":\"setDefaultProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"transferLensHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KoruDao.sol\":\"KoruDao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84690ebda74336bdda266a1c10e4edb5e2488bf2ab018cfc0cf11693b743dff6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/KoruDao.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {\\n    ERC2771Context\\n} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {\\n    ERC721Holder\\n} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {Proxied} from \\\"./vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {DataTypes} from \\\"./libraries/LensDataTypes.sol\\\";\\nimport {ILensHub} from \\\"./interfaces/ILensHub.sol\\\";\\nimport {IKoruDao} from \\\"./interfaces/IKoruDao.sol\\\";\\nimport {IKoruDaoRestriction} from \\\"./interfaces/IKoruDaoRestriction.sol\\\";\\n\\n//solhint-disable not-rely-on-time\\ncontract KoruDao is ERC721Holder, ERC2771Context, Proxied, IKoruDao {\\n    ILensHub public immutable lensHub;\\n    uint256 public immutable koruDaoProfileId;\\n\\n    mapping(Action => address) public actionRestriction;\\n\\n    modifier onlyGelatoRelay() {\\n        require(isTrustedForwarder(msg.sender), \\\"KoruDao: Only GelatoRelay\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gelatoRelay,\\n        ILensHub _lensHub,\\n        uint256 _koruDaoProfileId\\n    ) ERC2771Context(_gelatoRelay) {\\n        lensHub = _lensHub;\\n        koruDaoProfileId = _koruDaoProfileId;\\n    }\\n\\n    function post(DataTypes.PostData calldata _postData)\\n        external\\n        override\\n        onlyGelatoRelay\\n    {\\n        require(\\n            _postData.profileId == koruDaoProfileId,\\n            \\\"KoruDao: Only post for KoruDao\\\"\\n        );\\n        address user = _msgSender();\\n\\n        IKoruDaoRestriction restriction = _getRestriction(Action.POST);\\n\\n        uint256 token = restriction.checkAndUpdateRestriction(\\n            user,\\n            uint256(Action.POST)\\n        );\\n\\n        uint256 pubId = lensHub.post(_postData);\\n\\n        emit LogPost(user, token, pubId, block.timestamp);\\n    }\\n\\n    function follow(uint256 _profileId, bytes calldata _followData)\\n        external\\n        override\\n        onlyGelatoRelay\\n    {\\n        address user = _msgSender();\\n\\n        IKoruDaoRestriction restriction = _getRestriction(Action.FOLLOW);\\n\\n        uint256 token = restriction.checkAndUpdateRestriction(\\n            user,\\n            uint256(Action.FOLLOW)\\n        );\\n\\n        uint256[] memory profileIds = new uint256[](1);\\n        bytes[] memory followDatas = new bytes[](1);\\n\\n        profileIds[0] = _profileId;\\n        followDatas[0] = _followData;\\n\\n        uint256[] memory followTokenIds = lensHub.follow(\\n            profileIds,\\n            followDatas\\n        );\\n\\n        emit LogFollow(user, token, followTokenIds, block.timestamp);\\n    }\\n\\n    function mirror(DataTypes.MirrorData calldata _mirrorData)\\n        external\\n        override\\n        onlyGelatoRelay\\n    {\\n        require(\\n            _mirrorData.profileId == koruDaoProfileId,\\n            \\\"KoruDao: Only mirror for KoruDao\\\"\\n        );\\n        address user = _msgSender();\\n\\n        IKoruDaoRestriction restriction = _getRestriction(Action.MIRROR);\\n\\n        uint256 token = restriction.checkAndUpdateRestriction(\\n            user,\\n            uint256(Action.MIRROR)\\n        );\\n\\n        uint256 pubId = lensHub.mirror(_mirrorData);\\n\\n        emit LogMirror(user, token, pubId, block.timestamp);\\n    }\\n\\n    function setActionRestriction(Action _action, address _restriction)\\n        external\\n        onlyProxyAdmin\\n    {\\n        actionRestriction[_action] = _restriction;\\n    }\\n\\n    function setDefaultProfile(uint256 _profileId) external onlyProxyAdmin {\\n        lensHub.setDefaultProfile(_profileId);\\n    }\\n\\n    function _getRestriction(Action _action)\\n        private\\n        view\\n        returns (IKoruDaoRestriction restriction)\\n    {\\n        restriction = IKoruDaoRestriction(actionRestriction[_action]);\\n\\n        require(\\n            address(restriction) != address(0),\\n            \\\"KoruDao: Action not active\\\"\\n        );\\n    }\\n\\n    function transferLensHandle(address to, uint profileId) external override onlyProxyAdmin {\\n        lensHub.safeTransferFrom(address(this), to, profileId);\\n    }\\n}\\n\",\"keccak256\":\"0x3e9c47f24cddfe732ad513782066d033e54bf30a6e2457ed2d6b3526cdb8ddbf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IKoruDao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\n\\ninterface IKoruDao {\\n    enum Action {\\n        POST,\\n        FOLLOW,\\n        MIRROR\\n    }\\n\\n    event LogPost(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256 indexed pubId,\\n        uint256 time\\n    );\\n\\n    event LogFollow(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256[] indexed followTokenIds,\\n        uint256 time\\n    );\\n\\n    event LogMirror(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256 indexed pubId,\\n        uint256 time\\n    );\\n\\n    function transferLensHandle(address to, uint handle) external;\\n\\n    function post(DataTypes.PostData calldata _postData) external;\\n\\n    function follow(uint256 _profileId, bytes calldata _followData) external;\\n\\n    function mirror(DataTypes.MirrorData calldata _mirrorData) external;\\n}\\n\",\"keccak256\":\"0x57729f337a13dfcac5cfadb500d50e2995dedbce3ec7ee1b265904f46344ba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IKoruDaoRestriction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\n\\ninterface IKoruDaoRestriction {\\n    function checkAndUpdateRestriction(address _user, uint256 _action)\\n        external\\n        returns (uint256 token);\\n\\n    function checkRestriction(uint256 _token, uint256 _action) external view;\\n\\n    function getKoruDaoNftTokenId(address _user)\\n        external\\n        view\\n        returns (uint256 token);\\n}\\n\",\"keccak256\":\"0x89d3ab053345e7152234d515234563c08a3c5212b2e1966cc9d947e2e3604d6f\",\"license\":\"MIT\"},\"contracts/interfaces/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ILensHub\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface ILensHub is IERC721 {\\n    /**\\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\\n     * the LensNFTBase contract.\\n     *\\n     * @param name The name to set for the hub NFT.\\n     * @param symbol The symbol to set for the hub NFT.\\n     * @param newGovernance The governance address to set.\\n     */\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address newGovernance\\n    ) external;\\n\\n    /**\\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\\n     * address.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\\n     * can only be called by the governance address.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\\n     * can only be called by the governance address or the emergency admin address.\\n     *\\n     * Note that this reverts if the emergency admin calls it if:\\n     *      1. The emergency admin is attempting to unpause.\\n     *      2. The emergency admin is calling while the protocol is already paused.\\n     *\\n     * @param newState The state to set, as a member of the ProtocolState enum.\\n     */\\n    function setState(DataTypes.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param followModule The follow module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the follow module should be whitelisted.\\n     */\\n    function whitelistFollowModule(address followModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\\n     * @param whitelist Whether or not the reference module should be whitelisted.\\n     */\\n    function whitelistReferenceModule(address referenceModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the collect module should be whitelisted.\\n     */\\n    function whitelistCollectModule(address collectModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\\n     * function must be called by a whitelisted profile creator.\\n     *\\n     * @param vars A CreateProfileData struct containing the following params:\\n     *      to: The address receiving the profile.\\n     *      handle: The handle to set for the profile, must be unique and non-empty.\\n     *      imageURI: The URI to set for the profile image.\\n     *      followModule: The follow module to use, can be the zero address.\\n     *      followModuleInitData: The follow module initialization data, if any.\\n     */\\n    function createProfile(DataTypes.CreateProfileData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity.\\n     *\\n     * @param profileId The token ID of the profile to set as the main profile identity.\\n     */\\n    function setDefaultProfile(uint256 profileId) external;\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\\n     *\\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDefaultProfileWithSig(\\n        DataTypes.SetDefaultProfileWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module, must be called by the profile owner.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowModuleWithSig(\\n        DataTypes.SetFollowModuleWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the given profile ID.\\n     */\\n    function setDispatcher(uint256 profileId, address dispatcher) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\\n     *\\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDispatcherWithSig(\\n        DataTypes.SetDispatcherWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile.\\n     */\\n    function setProfileImageURI(uint256 profileId, string calldata imageURI)\\n        external;\\n\\n    /**\\n     * @notice Sets a profile's URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileImageURIWithSig(\\n        DataTypes.SetProfileImageURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     */\\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI)\\n        external;\\n\\n    /**\\n     * @notice Sets a followNFT URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowNFTURIWithSig(\\n        DataTypes.SetFollowNFTURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A PostData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function postWithSig(DataTypes.PostWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A CommentData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(DataTypes.CommentData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A MirrorData struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(DataTypes.MirrorData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\\n     *\\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\\n     *\\n     * @param profileIds The token ID array of the profiles to follow.\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Follows a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collect module if needed.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collect(\\n        uint256 profileId,\\n        uint256 pubId,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     *\\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\\n     * an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\\n     * followNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     */\\n    function emitFollowNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 followNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\\n     * collectNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\\n     * @param pubId The publication ID associated with the collect NFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     */\\n    function emitCollectNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 collectNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /// ************************\\n    /// *****VIEW FUNCTIONS*****\\n    /// ************************\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns default profile for a given wallet address\\n     *\\n     * @param wallet The address to find the default mapping\\n     *\\n     * @return uint256 The default profile id, which will be 0 if not mapped.\\n     */\\n    function defaultProfile(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether or not a follow module is whitelisted.\\n     *\\n     * @param followModule The address of the follow module to check.\\n     *\\n     * @return bool True if the the follow module is whitelisted, false otherwise.\\n     */\\n    function isFollowModuleWhitelisted(address followModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a reference module is whitelisted.\\n     *\\n     * @param referenceModule The address of the reference module to check.\\n     *\\n     * @return bool True if the the reference module is whitelisted, false otherwise.\\n     */\\n    function isReferenceModuleWhitelisted(address referenceModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a collect module is whitelisted.\\n     *\\n     * @param collectModule The address of the collect module to check.\\n     *\\n     * @return bool True if the the collect module is whitelisted, false otherwise.\\n     */\\n    function isCollectModuleWhitelisted(address collectModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the dispatcher associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the dispatcher for.\\n     *\\n     * @return address The dispatcher address associated with the profile.\\n     */\\n    function getDispatcher(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the publication count for a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return uint256 The number of publications associated with the queried profile.\\n     */\\n    function getPubCount(uint256 profileId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the followNFT associated with a given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT for.\\n     *\\n     * @return address The followNFT associated with the given profile.\\n     */\\n    function getFollowNFT(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the followNFT URI associated with a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT URI for.\\n     *\\n     * @return string The followNFT URI associated with the given profile.\\n     */\\n    function getFollowNFTURI(uint256 profileId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the collectNFT associated with a given publication, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collectNFT associated with the queried publication.\\n     */\\n    function getCollectNFT(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the follow module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the follow module for.\\n     *\\n     * @return address The address of the follow module associated with the given profile.\\n     */\\n    function getFollowModule(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect module associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collect module associated with the queried publication.\\n     */\\n    function getCollectModule(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the reference module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\\n     * @param pubId The publication ID of the publication to query the reference module for.\\n     *\\n     * @return address The address of the reference module associated with the given profile.\\n     */\\n    function getReferenceModule(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the handle associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the handle for.\\n     *\\n     * @return string The handle associated with the profile.\\n     */\\n    function getHandle(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\\n     * @param pubId The publication ID of the publication to query the pointer for.\\n     *\\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\\n     * publication ID of the publication the current publication is pointing to.\\n     */\\n    function getPubPointer(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the profile token ID according to a given handle.\\n     *\\n     * @param handle The handle to resolve the profile token ID with.\\n     *\\n     * @return uint256 The profile ID the passed handle points to.\\n     */\\n    function getProfileIdByHandle(string calldata handle)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return ProfileStruct The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId)\\n        external\\n        view\\n        returns (DataTypes.ProfileStruct memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationStruct The publication struct associated with the queried publication.\\n     */\\n    function getPub(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PublicationStruct memory);\\n\\n    /**\\n     * @notice Returns the publication type associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\\n     */\\n    function getPubType(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PubType);\\n\\n    /**\\n     * @notice Returns the follow NFT implementation address.\\n     *\\n     * @return address The follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect NFT implementation address.\\n     *\\n     * @return address The collect NFT implementation address.\\n     */\\n    function getCollectNFTImpl() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa3ab9df0697134cd879ca19123a159c63fc070cb4e5c963f68b13ba80e8bde92\",\"license\":\"MIT\"},\"contracts/libraries/LensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\",\"keccak256\":\"0x010e8a2b32890fba7eae1858bf4cede187b811bed8db956e10cd82ec0dec27c5\",\"license\":\"MIT\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200229b3803806200229b83398181016040528101906200003791906200019c565b828073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060c08181525050505050620001f8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b60006200012982620000d7565b9050919050565b6200013b816200011c565b81146200014757600080fd5b50565b6000815190506200015b8162000130565b92915050565b6000819050919050565b620001768162000161565b81146200018257600080fd5b50565b60008151905062000196816200016b565b92915050565b600080600060608486031215620001b857620001b7620000b2565b5b6000620001c88682870162000105565b9350506020620001db868287016200014a565b9250506040620001ee8682870162000185565b9150509250925092565b60805160a05160c0516120426200025960003960008181610280015281816109050152610971015260008181610396015281816106aa01528181610a8801528181610b7d01528181610c160152610d1e015260006107c101526120426000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806384af9a921161007157806384af9a9214610162578063963ff14114610180578063b02cfdc31461019c578063caa88f9e146101ba578063f1b2f8bc146101d6578063fb706254146101f2576100a9565b8063150b7a02146100ae5780632faeed81146100de57806340c8370c146100fa578063572b6c05146101165780636f3bca2114610146575b600080fd5b6100c860048036038101906100c391906110fd565b610222565b6040516100d591906111bb565b60405180910390f35b6100f860048036038101906100f391906111fa565b610236565b005b610114600480360381019061010f91906112a3565b610489565b005b610130600480360381019061012b9190611303565b6107bd565b60405161013d919061134b565b60405180910390f35b610160600480360381019061015b919061138b565b610815565b005b61016a610903565b60405161017791906113da565b60405180910390f35b61019a60048036038101906101959190611414565b610927565b005b6101a4610b7b565b6040516101b191906114bc565b60405180910390f35b6101d460048036038101906101cf91906114d7565b610b9f565b005b6101f060048036038101906101eb9190611517565b610ca7565b005b61020c60048036038101906102079190611544565b610daa565b6040516102199190611580565b60405180910390f35b600063150b7a0260e01b9050949350505050565b61023f336107bd565b61027e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610275906115f8565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160000135146102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db90611664565b60405180910390fd5b60006102ee610ddd565b905060006102fc6002610e0f565b905060008173ffffffffffffffffffffffffffffffffffffffff16635f183e79846002808111156103305761032f611684565b5b6040518363ffffffff1660e01b815260040161034d9291906116b3565b6020604051808303816000875af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039091906116f1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632faeed81866040518263ffffffff1660e01b81526004016103ed91906118de565b6020604051808303816000875af115801561040c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043091906116f1565b905080828573ffffffffffffffffffffffffffffffffffffffff167fe1289db23a10f53339637d9649c2ee51b4461d19877697e53870506bf33cff2b4260405161047a91906113da565b60405180910390a45050505050565b610492336107bd565b6104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c8906115f8565b60405180910390fd5b60006104db610ddd565b905060006104e96001610e0f565b905060008173ffffffffffffffffffffffffffffffffffffffff16635f183e79846001600281111561051e5761051d611684565b5b6040518363ffffffff1660e01b815260040161053b9291906116b3565b6020604051808303816000875af115801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e91906116f1565b90506000600167ffffffffffffffff81111561059d5761059c610fd2565b5b6040519080825280602002602001820160405280156105cb5781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156105eb576105ea610fd2565b5b60405190808252806020026020018201604052801561061e57816020015b60608152602001906001900390816106095790505b509050878260008151811061063657610635611900565b5b60200260200101818152505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160008151811061069b5761069a611900565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fb78ae6c84846040518363ffffffff1660e01b8152600401610703929190611b17565b6000604051808303816000875af1158015610722573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061074b9190611c11565b90508060405161075b9190611cea565b6040518091039020848773ffffffffffffffffffffffffffffffffffffffff167f6ca6bbf216eed80adfcac490fb89f2cbf3ffd707781aaf728bbdfb6d5ccfc1d1426040516107aa91906113da565b60405180910390a4505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61081d610ede565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088190611d4d565b60405180910390fd5b806000808460028111156108a1576108a0611684565b5b60028111156108b3576108b2611684565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610930336107bd565b61096f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610966906115f8565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160000135146109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90611db9565b60405180910390fd5b60006109df610ddd565b905060006109ed6000610e0f565b905060008173ffffffffffffffffffffffffffffffffffffffff16635f183e798460006002811115610a2257610a21611684565b5b6040518363ffffffff1660e01b8152600401610a3f9291906116b3565b6020604051808303816000875af1158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8291906116f1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663963ff141866040518263ffffffff1660e01b8152600401610adf9190611f47565b6020604051808303816000875af1158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906116f1565b905080828573ffffffffffffffffffffffffffffffffffffffff167fb3de7ef76dc0d0512b40164c07da30a2bd66a76a55c8748f0c2fe7bcc6cc39e142604051610b6c91906113da565b60405180910390a45050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ba7610ede565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b90611d4d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e3084846040518463ffffffff1660e01b8152600401610c7193929190611f69565b600060405180830381600087803b158015610c8b57600080fd5b505af1158015610c9f573d6000803e3d6000fd5b505050505050565b610caf610ede565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1390611d4d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f1b2f8bc826040518263ffffffff1660e01b8152600401610d7591906113da565b600060405180830381600087803b158015610d8f57600080fd5b505af1158015610da3573d6000803e3d6000fd5b5050505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610de8336107bd565b15610dfc57601436033560601c9050610e0b565b610e04610f07565b9050610e0c565b5b90565b6000806000836002811115610e2757610e26611684565b5b6002811115610e3957610e38611684565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090611fec565b60405180910390fd5b919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4e82610f23565b9050919050565b610f5e81610f43565b8114610f6957600080fd5b50565b600081359050610f7b81610f55565b92915050565b6000819050919050565b610f9481610f81565b8114610f9f57600080fd5b50565b600081359050610fb181610f8b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61100a82610fc1565b810181811067ffffffffffffffff8211171561102957611028610fd2565b5b80604052505050565b600061103c610f0f565b90506110488282611001565b919050565b600067ffffffffffffffff82111561106857611067610fd2565b5b61107182610fc1565b9050602081019050919050565b82818337600083830152505050565b60006110a061109b8461104d565b611032565b9050828152602081018484840111156110bc576110bb610fbc565b5b6110c784828561107e565b509392505050565b600082601f8301126110e4576110e3610fb7565b5b81356110f484826020860161108d565b91505092915050565b6000806000806080858703121561111757611116610f19565b5b600061112587828801610f6c565b945050602061113687828801610f6c565b935050604061114787828801610fa2565b925050606085013567ffffffffffffffff81111561116857611167610f1e565b5b611174878288016110cf565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6111b581611180565b82525050565b60006020820190506111d060008301846111ac565b92915050565b600080fd5b600060c082840312156111f1576111f06111d6565b5b81905092915050565b6000602082840312156112105761120f610f19565b5b600082013567ffffffffffffffff81111561122e5761122d610f1e565b5b61123a848285016111db565b91505092915050565b600080fd5b600080fd5b60008083601f84011261126357611262610fb7565b5b8235905067ffffffffffffffff8111156112805761127f611243565b5b60208301915083600182028301111561129c5761129b611248565b5b9250929050565b6000806000604084860312156112bc576112bb610f19565b5b60006112ca86828701610fa2565b935050602084013567ffffffffffffffff8111156112eb576112ea610f1e565b5b6112f78682870161124d565b92509250509250925092565b60006020828403121561131957611318610f19565b5b600061132784828501610f6c565b91505092915050565b60008115159050919050565b61134581611330565b82525050565b6000602082019050611360600083018461133c565b92915050565b6003811061137357600080fd5b50565b60008135905061138581611366565b92915050565b600080604083850312156113a2576113a1610f19565b5b60006113b085828601611376565b92505060206113c185828601610f6c565b9150509250929050565b6113d481610f81565b82525050565b60006020820190506113ef60008301846113cb565b92915050565b600060c0828403121561140b5761140a6111d6565b5b81905092915050565b60006020828403121561142a57611429610f19565b5b600082013567ffffffffffffffff81111561144857611447610f1e565b5b611454848285016113f5565b91505092915050565b6000819050919050565b600061148261147d61147884610f23565b61145d565b610f23565b9050919050565b600061149482611467565b9050919050565b60006114a682611489565b9050919050565b6114b68161149b565b82525050565b60006020820190506114d160008301846114ad565b92915050565b600080604083850312156114ee576114ed610f19565b5b60006114fc85828601610f6c565b925050602061150d85828601610fa2565b9150509250929050565b60006020828403121561152d5761152c610f19565b5b600061153b84828501610fa2565b91505092915050565b60006020828403121561155a57611559610f19565b5b600061156884828501611376565b91505092915050565b61157a81610f43565b82525050565b60006020820190506115956000830184611571565b92915050565b600082825260208201905092915050565b7f4b6f727544616f3a204f6e6c792047656c61746f52656c617900000000000000600082015250565b60006115e260198361159b565b91506115ed826115ac565b602082019050919050565b60006020820190508181036000830152611611816115d5565b9050919050565b7f4b6f727544616f3a204f6e6c79206d6972726f7220666f72204b6f727544616f600082015250565b600061164e60208361159b565b915061165982611618565b602082019050919050565b6000602082019050818103600083015261167d81611641565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006040820190506116c86000830185611571565b6116d560208301846113cb565b9392505050565b6000815190506116eb81610f8b565b92915050565b60006020828403121561170757611706610f19565b5b6000611715848285016116dc565b91505092915050565b600061172d6020840184610fa2565b905092915050565b61173e81610f81565b82525050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126117705761176f61174e565b5b83810192508235915060208301925067ffffffffffffffff82111561179857611797611744565b5b6001820236038313156117ae576117ad611749565b5b509250929050565b600082825260208201905092915050565b60006117d383856117b6565b93506117e083858461107e565b6117e983610fc1565b840190509392505050565b60006118036020840184610f6c565b905092915050565b61181481610f43565b82525050565b600060c0830161182d600084018461171e565b61183a6000860182611735565b50611848602084018461171e565b6118556020860182611735565b50611863604084018461171e565b6118706040860182611735565b5061187e6060840184611753565b85830360608701526118918382846117c7565b925050506118a260808401846117f4565b6118af608086018261180b565b506118bd60a0840184611753565b85830360a08701526118d08382846117c7565b925050508091505092915050565b600060208201905081810360008301526118f8818461181a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006119678383611735565b60208301905092915050565b6000602082019050919050565b600061198b8261192f565b611995818561193a565b93506119a08361194b565b8060005b838110156119d15781516119b8888261195b565b97506119c383611973565b9250506001810190506119a4565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b60005b83811015611a33578082015181840152602081019050611a18565b83811115611a42576000848401525b50505050565b6000611a5382611a0a565b611a5d81856117b6565b9350611a6d818560208601611a15565b611a7681610fc1565b840191505092915050565b6000611a8d8383611a48565b905092915050565b6000602082019050919050565b6000611aad826119de565b611ab781856119e9565b935083602082028501611ac9856119fa565b8060005b85811015611b055784840389528151611ae68582611a81565b9450611af183611a95565b925060208a01995050600181019050611acd565b50829750879550505050505092915050565b60006040820190508181036000830152611b318185611980565b90508181036020830152611b458184611aa2565b90509392505050565b600067ffffffffffffffff821115611b6957611b68610fd2565b5b602082029050602081019050919050565b6000611b8d611b8884611b4e565b611032565b90508083825260208201905060208402830185811115611bb057611baf611248565b5b835b81811015611bd95780611bc588826116dc565b845260208401935050602081019050611bb2565b5050509392505050565b600082601f830112611bf857611bf7610fb7565b5b8151611c08848260208601611b7a565b91505092915050565b600060208284031215611c2757611c26610f19565b5b600082015167ffffffffffffffff811115611c4557611c44610f1e565b5b611c5184828501611be3565b91505092915050565b600081905092915050565b611c6e81610f81565b82525050565b6000611c808383611c65565b60208301905092915050565b6000611c978261192f565b611ca18185611c5a565b9350611cac8361194b565b8060005b83811015611cdd578151611cc48882611c74565b9750611ccf83611973565b925050600181019050611cb0565b5085935050505092915050565b6000611cf68284611c8c565b915081905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000611d37600e8361159b565b9150611d4282611d01565b602082019050919050565b60006020820190508181036000830152611d6681611d2a565b9050919050565b7f4b6f727544616f3a204f6e6c7920706f737420666f72204b6f727544616f0000600082015250565b6000611da3601e8361159b565b9150611dae82611d6d565b602082019050919050565b60006020820190508181036000830152611dd281611d96565b9050919050565b60008083356001602003843603038112611df657611df561174e565b5b83810192508235915060208301925067ffffffffffffffff821115611e1e57611e1d611744565b5b600182023603831315611e3457611e33611749565b5b509250929050565b600082825260208201905092915050565b6000611e598385611e3c565b9350611e6683858461107e565b611e6f83610fc1565b840190509392505050565b600060c08301611e8d600084018461171e565b611e9a6000860182611735565b50611ea86020840184611dd9565b8583036020870152611ebb838284611e4d565b92505050611ecc60408401846117f4565b611ed9604086018261180b565b50611ee76060840184611753565b8583036060870152611efa8382846117c7565b92505050611f0b60808401846117f4565b611f18608086018261180b565b50611f2660a0840184611753565b85830360a0870152611f398382846117c7565b925050508091505092915050565b60006020820190508181036000830152611f618184611e7a565b905092915050565b6000606082019050611f7e6000830186611571565b611f8b6020830185611571565b611f9860408301846113cb565b949350505050565b7f4b6f727544616f3a20416374696f6e206e6f7420616374697665000000000000600082015250565b6000611fd6601a8361159b565b9150611fe182611fa0565b602082019050919050565b6000602082019050818103600083015261200581611fc9565b905091905056fea26469706673582212202c2c0ed622a0196abb37438211103dda1d91b16767ef2496b2a70b29a124fa2464736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806384af9a921161007157806384af9a9214610162578063963ff14114610180578063b02cfdc31461019c578063caa88f9e146101ba578063f1b2f8bc146101d6578063fb706254146101f2576100a9565b8063150b7a02146100ae5780632faeed81146100de57806340c8370c146100fa578063572b6c05146101165780636f3bca2114610146575b600080fd5b6100c860048036038101906100c391906110fd565b610222565b6040516100d591906111bb565b60405180910390f35b6100f860048036038101906100f391906111fa565b610236565b005b610114600480360381019061010f91906112a3565b610489565b005b610130600480360381019061012b9190611303565b6107bd565b60405161013d919061134b565b60405180910390f35b610160600480360381019061015b919061138b565b610815565b005b61016a610903565b60405161017791906113da565b60405180910390f35b61019a60048036038101906101959190611414565b610927565b005b6101a4610b7b565b6040516101b191906114bc565b60405180910390f35b6101d460048036038101906101cf91906114d7565b610b9f565b005b6101f060048036038101906101eb9190611517565b610ca7565b005b61020c60048036038101906102079190611544565b610daa565b6040516102199190611580565b60405180910390f35b600063150b7a0260e01b9050949350505050565b61023f336107bd565b61027e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610275906115f8565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160000135146102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db90611664565b60405180910390fd5b60006102ee610ddd565b905060006102fc6002610e0f565b905060008173ffffffffffffffffffffffffffffffffffffffff16635f183e79846002808111156103305761032f611684565b5b6040518363ffffffff1660e01b815260040161034d9291906116b3565b6020604051808303816000875af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039091906116f1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632faeed81866040518263ffffffff1660e01b81526004016103ed91906118de565b6020604051808303816000875af115801561040c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043091906116f1565b905080828573ffffffffffffffffffffffffffffffffffffffff167fe1289db23a10f53339637d9649c2ee51b4461d19877697e53870506bf33cff2b4260405161047a91906113da565b60405180910390a45050505050565b610492336107bd565b6104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c8906115f8565b60405180910390fd5b60006104db610ddd565b905060006104e96001610e0f565b905060008173ffffffffffffffffffffffffffffffffffffffff16635f183e79846001600281111561051e5761051d611684565b5b6040518363ffffffff1660e01b815260040161053b9291906116b3565b6020604051808303816000875af115801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e91906116f1565b90506000600167ffffffffffffffff81111561059d5761059c610fd2565b5b6040519080825280602002602001820160405280156105cb5781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156105eb576105ea610fd2565b5b60405190808252806020026020018201604052801561061e57816020015b60608152602001906001900390816106095790505b509050878260008151811061063657610635611900565b5b60200260200101818152505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160008151811061069b5761069a611900565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fb78ae6c84846040518363ffffffff1660e01b8152600401610703929190611b17565b6000604051808303816000875af1158015610722573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061074b9190611c11565b90508060405161075b9190611cea565b6040518091039020848773ffffffffffffffffffffffffffffffffffffffff167f6ca6bbf216eed80adfcac490fb89f2cbf3ffd707781aaf728bbdfb6d5ccfc1d1426040516107aa91906113da565b60405180910390a4505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61081d610ede565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088190611d4d565b60405180910390fd5b806000808460028111156108a1576108a0611684565b5b60028111156108b3576108b2611684565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610930336107bd565b61096f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610966906115f8565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160000135146109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90611db9565b60405180910390fd5b60006109df610ddd565b905060006109ed6000610e0f565b905060008173ffffffffffffffffffffffffffffffffffffffff16635f183e798460006002811115610a2257610a21611684565b5b6040518363ffffffff1660e01b8152600401610a3f9291906116b3565b6020604051808303816000875af1158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8291906116f1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663963ff141866040518263ffffffff1660e01b8152600401610adf9190611f47565b6020604051808303816000875af1158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906116f1565b905080828573ffffffffffffffffffffffffffffffffffffffff167fb3de7ef76dc0d0512b40164c07da30a2bd66a76a55c8748f0c2fe7bcc6cc39e142604051610b6c91906113da565b60405180910390a45050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ba7610ede565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b90611d4d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e3084846040518463ffffffff1660e01b8152600401610c7193929190611f69565b600060405180830381600087803b158015610c8b57600080fd5b505af1158015610c9f573d6000803e3d6000fd5b505050505050565b610caf610ede565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1390611d4d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f1b2f8bc826040518263ffffffff1660e01b8152600401610d7591906113da565b600060405180830381600087803b158015610d8f57600080fd5b505af1158015610da3573d6000803e3d6000fd5b5050505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610de8336107bd565b15610dfc57601436033560601c9050610e0b565b610e04610f07565b9050610e0c565b5b90565b6000806000836002811115610e2757610e26611684565b5b6002811115610e3957610e38611684565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090611fec565b60405180910390fd5b919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4e82610f23565b9050919050565b610f5e81610f43565b8114610f6957600080fd5b50565b600081359050610f7b81610f55565b92915050565b6000819050919050565b610f9481610f81565b8114610f9f57600080fd5b50565b600081359050610fb181610f8b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61100a82610fc1565b810181811067ffffffffffffffff8211171561102957611028610fd2565b5b80604052505050565b600061103c610f0f565b90506110488282611001565b919050565b600067ffffffffffffffff82111561106857611067610fd2565b5b61107182610fc1565b9050602081019050919050565b82818337600083830152505050565b60006110a061109b8461104d565b611032565b9050828152602081018484840111156110bc576110bb610fbc565b5b6110c784828561107e565b509392505050565b600082601f8301126110e4576110e3610fb7565b5b81356110f484826020860161108d565b91505092915050565b6000806000806080858703121561111757611116610f19565b5b600061112587828801610f6c565b945050602061113687828801610f6c565b935050604061114787828801610fa2565b925050606085013567ffffffffffffffff81111561116857611167610f1e565b5b611174878288016110cf565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6111b581611180565b82525050565b60006020820190506111d060008301846111ac565b92915050565b600080fd5b600060c082840312156111f1576111f06111d6565b5b81905092915050565b6000602082840312156112105761120f610f19565b5b600082013567ffffffffffffffff81111561122e5761122d610f1e565b5b61123a848285016111db565b91505092915050565b600080fd5b600080fd5b60008083601f84011261126357611262610fb7565b5b8235905067ffffffffffffffff8111156112805761127f611243565b5b60208301915083600182028301111561129c5761129b611248565b5b9250929050565b6000806000604084860312156112bc576112bb610f19565b5b60006112ca86828701610fa2565b935050602084013567ffffffffffffffff8111156112eb576112ea610f1e565b5b6112f78682870161124d565b92509250509250925092565b60006020828403121561131957611318610f19565b5b600061132784828501610f6c565b91505092915050565b60008115159050919050565b61134581611330565b82525050565b6000602082019050611360600083018461133c565b92915050565b6003811061137357600080fd5b50565b60008135905061138581611366565b92915050565b600080604083850312156113a2576113a1610f19565b5b60006113b085828601611376565b92505060206113c185828601610f6c565b9150509250929050565b6113d481610f81565b82525050565b60006020820190506113ef60008301846113cb565b92915050565b600060c0828403121561140b5761140a6111d6565b5b81905092915050565b60006020828403121561142a57611429610f19565b5b600082013567ffffffffffffffff81111561144857611447610f1e565b5b611454848285016113f5565b91505092915050565b6000819050919050565b600061148261147d61147884610f23565b61145d565b610f23565b9050919050565b600061149482611467565b9050919050565b60006114a682611489565b9050919050565b6114b68161149b565b82525050565b60006020820190506114d160008301846114ad565b92915050565b600080604083850312156114ee576114ed610f19565b5b60006114fc85828601610f6c565b925050602061150d85828601610fa2565b9150509250929050565b60006020828403121561152d5761152c610f19565b5b600061153b84828501610fa2565b91505092915050565b60006020828403121561155a57611559610f19565b5b600061156884828501611376565b91505092915050565b61157a81610f43565b82525050565b60006020820190506115956000830184611571565b92915050565b600082825260208201905092915050565b7f4b6f727544616f3a204f6e6c792047656c61746f52656c617900000000000000600082015250565b60006115e260198361159b565b91506115ed826115ac565b602082019050919050565b60006020820190508181036000830152611611816115d5565b9050919050565b7f4b6f727544616f3a204f6e6c79206d6972726f7220666f72204b6f727544616f600082015250565b600061164e60208361159b565b915061165982611618565b602082019050919050565b6000602082019050818103600083015261167d81611641565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006040820190506116c86000830185611571565b6116d560208301846113cb565b9392505050565b6000815190506116eb81610f8b565b92915050565b60006020828403121561170757611706610f19565b5b6000611715848285016116dc565b91505092915050565b600061172d6020840184610fa2565b905092915050565b61173e81610f81565b82525050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126117705761176f61174e565b5b83810192508235915060208301925067ffffffffffffffff82111561179857611797611744565b5b6001820236038313156117ae576117ad611749565b5b509250929050565b600082825260208201905092915050565b60006117d383856117b6565b93506117e083858461107e565b6117e983610fc1565b840190509392505050565b60006118036020840184610f6c565b905092915050565b61181481610f43565b82525050565b600060c0830161182d600084018461171e565b61183a6000860182611735565b50611848602084018461171e565b6118556020860182611735565b50611863604084018461171e565b6118706040860182611735565b5061187e6060840184611753565b85830360608701526118918382846117c7565b925050506118a260808401846117f4565b6118af608086018261180b565b506118bd60a0840184611753565b85830360a08701526118d08382846117c7565b925050508091505092915050565b600060208201905081810360008301526118f8818461181a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006119678383611735565b60208301905092915050565b6000602082019050919050565b600061198b8261192f565b611995818561193a565b93506119a08361194b565b8060005b838110156119d15781516119b8888261195b565b97506119c383611973565b9250506001810190506119a4565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b60005b83811015611a33578082015181840152602081019050611a18565b83811115611a42576000848401525b50505050565b6000611a5382611a0a565b611a5d81856117b6565b9350611a6d818560208601611a15565b611a7681610fc1565b840191505092915050565b6000611a8d8383611a48565b905092915050565b6000602082019050919050565b6000611aad826119de565b611ab781856119e9565b935083602082028501611ac9856119fa565b8060005b85811015611b055784840389528151611ae68582611a81565b9450611af183611a95565b925060208a01995050600181019050611acd565b50829750879550505050505092915050565b60006040820190508181036000830152611b318185611980565b90508181036020830152611b458184611aa2565b90509392505050565b600067ffffffffffffffff821115611b6957611b68610fd2565b5b602082029050602081019050919050565b6000611b8d611b8884611b4e565b611032565b90508083825260208201905060208402830185811115611bb057611baf611248565b5b835b81811015611bd95780611bc588826116dc565b845260208401935050602081019050611bb2565b5050509392505050565b600082601f830112611bf857611bf7610fb7565b5b8151611c08848260208601611b7a565b91505092915050565b600060208284031215611c2757611c26610f19565b5b600082015167ffffffffffffffff811115611c4557611c44610f1e565b5b611c5184828501611be3565b91505092915050565b600081905092915050565b611c6e81610f81565b82525050565b6000611c808383611c65565b60208301905092915050565b6000611c978261192f565b611ca18185611c5a565b9350611cac8361194b565b8060005b83811015611cdd578151611cc48882611c74565b9750611ccf83611973565b925050600181019050611cb0565b5085935050505092915050565b6000611cf68284611c8c565b915081905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000611d37600e8361159b565b9150611d4282611d01565b602082019050919050565b60006020820190508181036000830152611d6681611d2a565b9050919050565b7f4b6f727544616f3a204f6e6c7920706f737420666f72204b6f727544616f0000600082015250565b6000611da3601e8361159b565b9150611dae82611d6d565b602082019050919050565b60006020820190508181036000830152611dd281611d96565b9050919050565b60008083356001602003843603038112611df657611df561174e565b5b83810192508235915060208301925067ffffffffffffffff821115611e1e57611e1d611744565b5b600182023603831315611e3457611e33611749565b5b509250929050565b600082825260208201905092915050565b6000611e598385611e3c565b9350611e6683858461107e565b611e6f83610fc1565b840190509392505050565b600060c08301611e8d600084018461171e565b611e9a6000860182611735565b50611ea86020840184611dd9565b8583036020870152611ebb838284611e4d565b92505050611ecc60408401846117f4565b611ed9604086018261180b565b50611ee76060840184611753565b8583036060870152611efa8382846117c7565b92505050611f0b60808401846117f4565b611f18608086018261180b565b50611f2660a0840184611753565b85830360a0870152611f398382846117c7565b925050508091505092915050565b60006020820190508181036000830152611f618184611e7a565b905092915050565b6000606082019050611f7e6000830186611571565b611f8b6020830185611571565b611f9860408301846113cb565b949350505050565b7f4b6f727544616f3a20416374696f6e206e6f7420616374697665000000000000600082015250565b6000611fd6601a8361159b565b9150611fe182611fa0565b602082019050919050565b6000602082019050818103600083015261200581611fc9565b905091905056fea26469706673582212202c2c0ed622a0196abb37438211103dda1d91b16767ef2496b2a70b29a124fa2464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 307,
        "contract": "contracts/KoruDao.sol:KoruDao",
        "label": "actionRestriction",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_enum(Action)639,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(Action)639": {
        "encoding": "inplace",
        "label": "enum IKoruDao.Action",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Action)639,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Action)639",
        "label": "mapping(enum IKoruDao.Action => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}